# -*- coding: utf-8 -*-
"""
Created on Mon Aug  2 20:34:10 2021

@author: fhu14

Utilities related to analyzing inter-atomic distances in all molecules of 
a dataset
"""
#%% Imports, definitions
from itertools import combinations
from typing import List, Dict
from scipy.spatial.distance import pdist
from functools import reduce

#%% Code behind

def generate_molec_dist_dict(mol: Dict) -> Dict:
    r"""Generates a dictionary of the interatomic distances
        for a single molecule
    
    Arguments:
        mol (Dict): The molecule dictionary
    
    Returns:
        dist_dict (Dict): The dictionary of the interatomic distances
    
    Notes: relies on pdist and other pythonic tricks to perform
        this manipulation.
    """
    atoms = mol['atomic_numbers'] #(Natom,)
    coords = mol['coordinates'] #(Natom, 3)
    
    atom_pairs = list(combinations(atoms, 2))
    distances = pdist(coords)
    
    assert(len(atom_pairs) == len(distances))
    
    dist_dict = dict()
    
    for elems, dist in zip(atom_pairs, distances):
        if elems not in dist_dict:
            dist_dict[elems] = [dist]
        else:
            dist_dict[elems].append(dist)
    
    return dist_dict

def fuse_dicts(dict_1: Dict, dict_2: Dict) -> Dict:
    r"""Fuses two distance dictionaries together that were generated by
        generate_molec_dist_dict.
    
    Arguments:
        dict_1 (Dict): The first dictionary to fuse
        dict_2 (Dict): The second dictionary to fuse
    
    Returns:
        fused_dist_dict (Dict): The fused distance dictionary 
            resulting from correlating the entries of dict_2 and 
            either updating/adding the entries into dict_1.
    """
    total_dict = dict_1
    for key in dict_2:
        if key not in total_dict:
            total_dict[key] = dict_2[key]
        else:
            total_dict[key].extend(dict_2[key])
    return total_dict

def get_dist_distribution(dset: List[Dict]) -> Dict:
    r"""Generates a dictionary of all the distances for each interatomic pair
        in a given dataset.
        
    Arguments:
        dset (List[Dict]): The current dataset to analyze.
    
    Returns:
        dist_dict (Dict): The total distance dictionary.
    
    Notes: This code works without having to exclude reverse cases (e.g. (6, 1) vs (1, 6)) in
        the set of keys because for each molecule dictionary, the atomic numbers are sorted 
        in a specific way. Because we are using ANI-1ccx_clean_fullentry.h5 as the datset, it 
        seems that every molecule dictionary within that dataset has the atomic numbers ordered
        such that they go 6, 1, 7, 8. The ordering appears invariant to the ordering of any
        of the parameters inputted. But, this should be checked more carefully with a 
        formalized test.
    """
    mol_dicts = list(map(lambda x : generate_molec_dist_dict(x), dset))
    dist_dict = reduce(lambda x, y : fuse_dicts(x, y), mol_dicts)
    return dist_dict

#%% Main block

if __name__ == '__main__':
    pass

